<?xml version="1.0" encoding="${encoding}"?>
<#include "Types.ftlx">
<#assign cacheQuery = "
select ca.Code, ca.Name, ca.SmartName, ca.Latitude, ca.Longitude, ca.CacheType,
ca.Elevation, ca.Difficulty, ca.Terrain, ca.PlacedBy, ca.PlacedDate, ca.LastFoundDate,
ca.TempDisabled, ca.Archived,
ca.Guid, ca.CacheId, ca.OwnerId, ca.OwnerName, ca.Container, ca.County, ca.Country, ca.State, ca.Distance,
cm.LongDescription, cm.ShortDescription, ca.ShortHtm, ca.LongHtm, cm.Hints, cm.UserNote,
cu.GefundenVon, cu.GCV_AverageVote, cu.FavRatio, cu.AvgLogsPerYear, cu.MeinKommentar,
group_concat(at.aInc || '-' || at.aId) as Attributes, ca.Bearing
from Caches ca
join Custom cu on ca.code = cu.cCode
join CacheMemo cm on ca.code=cm.Code
${join!}
left join Attributes at on ca.Code = at.aCode and at.aId not in (1,2,6,17,18,19,20,21,22,23,26,27,28,29,30,31,37,38,43,46,58,59,63)
where ${where}
group by ca.Code
order by ${orderBy!\"round(sqrt(ca.Distance)), ca.Degrees\"}
limit ${limit!\"50000\"};
">
<#assign bboxQuery = "
select round(min(ca.Latitude-0.0), 6) as minlat, round(min(ca.Longitude-0.0), 6) as minlon, 
       round(max(ca.Latitude+0.0), 6) as maxlat, round(max(ca.Longitude+0.0), 6) as maxlon
from Caches ca
join Custom cu on ca.code = cu.cCode
${join!}
where ${where};
">
<#assign logQuery = "
select lo.lType, lo.lBy, lo.lDate, lo.lLogId, lo.lTime, lo.lownerid, lm.lText
from Logs lo
join LogMemo lm on lo.lLogId=lm.lLogId and lo.lParent=lm.lParent
where lo.lParent = '{CODE}'
and length(lm.lText) > 25
order by lo.lDate desc
limit ${loglimit!\"15\"};
">
<#assign lflLogQuery = "
select distinct lo.lType, lo.lDate
from Logs lo
where lo.lParent = '{CODE}'
order by lo.lDate desc
limit 5;
">
<#list sql('${bboxQuery}') as bbox>
<gpx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" creator="Markus Bubendorf"
    xsi:schemaLocation="http://www.topografix.com/GPX/1/0 http://www.topografix.com/GPX/1/0/gpx.xsd http://www.groundspeak.com/cache/1/0/1 http://www.groundspeak.com/cache/1/0/1/cache.xsd"
    xmlns="http://www.topografix.com/GPX/1/0">
    <desc>Geocache file generated by gsak2gpx V${version}</desc>
    <author>Markus Bubendorf</author>
    <email>markus@bubendorf.ch</email>
    <time>${datetime}</time>
    <keywords>cache, geocache, groundspeak</keywords>
    <bounds minlat="${bbox.minlat}" minlon="${bbox.minlon}" maxlat="${bbox.maxlat}" maxlon="${bbox.maxlon}" />
</#list>

<#list sql('${cacheQuery}', '${category}') as ca>
    <wpt lat="${ca.Latitude}" lon="${ca.Longitude}">
        <ele>${ca.Elevation?c}</ele>
        <time>${ca.PlacedDate}</time>
        <name>${ca.Code}</name>
        <desc>${ca.SmartName}</desc>
        <urlname>${ca.Name} by ${ca.PlacedBy}</urlname>
        <sym>Geocache</sym>
        <type>Geocache|<@CacheType type=ca.CacheType/></type>
        <groundspeak:cache id="${ca.CacheId}" available="<@falsetrue bool=ca.TempDisabled/>"
            archived="<@truefalse bool=ca.Archived/>" xmlns:groundspeak="http://www.groundspeak.com/cache/1/0/1">
            <groundspeak:name>${ca.SmartName}</groundspeak:name>
            <groundspeak:placed_by>${ca.PlacedBy}</groundspeak:placed_by>
            <groundspeak:owner id="${ca.OwnerId}">${ca.OwnerName}</groundspeak:owner>
            <groundspeak:type><@CacheType type=ca.CacheType/></groundspeak:type>
            <groundspeak:container>${ca.Container}</groundspeak:container>
            <groundspeak:difficulty>${ca.Difficulty?c}</groundspeak:difficulty>
            <groundspeak:terrain>${ca.Terrain?c}</groundspeak:terrain>
            <groundspeak:country>${ca.Country}</groundspeak:country>
            <groundspeak:state>${ca.State}</groundspeak:state>
            <groundspeak:short_description>
                <#list sql('${lflLogQuery?replace("{CODE}", ca.Code)}') as log>
                    <@LogType type=log.lType/>:${log.lDate?string["d.M.yy"]} <#t>
                </#list>
            ${ca.ShortDescription?replace('<[^>]*>', '', 'r')?replace('(\r\n)+', '\r\n', 'rm')}
            </groundspeak:short_description>
            <groundspeak:long_description>${ca.LongDescription?replace('<(?!br)[^>]*>', '', 'rm')?replace('(\r\n)+', '\r\n', 'rm')?replace('<br[ /]*>\\s*<br[ /]*>', '<br/>', 'rm')}</groundspeak:long_description>
            <groundspeak:encoded_hints>${ca.Hints}
                <#if (ca.UserNote?length > 0)>***
                ${ca.UserNote}</#if><#t></groundspeak:encoded_hints>
            <groundspeak:logs>
              <groundspeak:log id="-3">
                <groundspeak:type>Write note</groundspeak:type>
                <groundspeak:text encoded="False">
<#if (ca.GefundenVon?length > 0)>GefundenVon: ${ca.GefundenVon}
&lt;br/&gt;</#if><#t>
<#if (ca.LastFoundDate?length > 0)>Letzter Fund: ${ca.LastFoundDate?string["d.M.yy"]}
&lt;br/&gt;</#if><#t>
<#if (ca.Hints?length > 0)>Hinweis: ${ca.Hints}
    &lt;br/&gt;</#if><#t>
<#if (ca.Elevation != 0)>HÃ¶he: ${ca.Elevation}
    &lt;br/&gt;</#if><#t>
<#if (ca.County?length > 0)>Ort: ${ca.County}
    &lt;br/&gt;</#if><#t>
<#if (ca.GCV_AverageVote > 0)>GCVote: ${ca.GCV_AverageVote}
    &lt;br/&gt;</#if><#t>
                    <#if (ca.FavRatio > 0)>FavRatio: ${ca.FavRatio}%
    &lt;br/&gt;</#if><#t>
<#if (ca.AvgLogsPerYear > 0)>AvgLosPerYear: ${ca.AvgLogsPerYear}
    &lt;br/&gt;</#if><#t>
<#if (ca.UserNote?length > 0)>UserNote: ${ca.UserNote}
    &lt;br/&gt;</#if><#t>
<#if (ca.MeinKommentar?length > 0)>Kommentar: ${ca.MeinKommentar}
    &lt;br/&gt;</#if><#t>
<#if (ca.Attributes?length > 0)>Attribute: <@attrString text=ca.Attributes/>
    &lt;br/&gt;</#if><#t>
                </groundspeak:text>
              </groundspeak:log>
            <#list sql('${logQuery?replace("{CODE}", ca.Code)}') as log>
              <groundspeak:log id="${log.lLogId?c}">
                <groundspeak:date>${log.lDate?string["yyyy-MM-dd"]}T${log.lTime}</groundspeak:date>
                <groundspeak:type>${log.lType}</groundspeak:type>
                <groundspeak:finder id="${log.lownerid?c}">${log.lBy}</groundspeak:finder>
                <groundspeak:text encoded="False">
				    <#if (log.lText?length > 1000)>
					   ...${log.lText[log.lText?length-1000..]?replace('\\<.*?>', '', 'r')}
					<#else>
					   ${log.lText?replace('\\<.*?>', '', 'r')}
					</#if>
				</groundspeak:text>
              </groundspeak:log>
            </#list>
            </groundspeak:logs>
        </groundspeak:cache>
    </wpt>
</#list>
</gpx>
